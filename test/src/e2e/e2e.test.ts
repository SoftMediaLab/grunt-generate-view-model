"use strict";

import * as fs from "fs";
import {} from "mocha";
import {createViewModels} from "../../../src/index";
import {expect} from "chai";


describe("E2E Tests", () => {

      it("Hero", (done) => {
        const expectedFileName = "./test/src/expected/heroes/heroViewModel.ts";
        const generatedFileName = "./test/dist/_autogenerated_viewmodels/heroes/heroViewModel.ts";

        createViewModels();
  
        let expected = fs.readFileSync(expectedFileName, "utf-8");
        let result = fs.readFileSync(generatedFileName, "utf-8");

        let expected2 = fs.readFileSync("./test/src/expected/heroes/mappers/heroViewModelMapper.ts", "utf-8");
        let result2 = fs.readFileSync( "./test/dist/_autogenerated_viewmodels/heroes/mappers/heroViewModelMapper.ts", "utf-8");

        let expected3 = fs.readFileSync("./test/src/expected/heroes/mappers/simpeHeroViewModelMapper.ts", "utf-8");
        let result3 = fs.readFileSync( "./test/dist/_autogenerated_viewmodels/heroes/mappers/simpeHeroViewModelMapper.ts", "utf-8");

        let expected4 = fs.readFileSync("./test/src/expected/heroes/mappers/heroViewModel1Mapper.ts", "utf-8");
        let result4 = fs.readFileSync( "./test/dist/_autogenerated_viewmodels/heroes/mappers/heroViewModel1Mapper.ts", "utf-8");

        let expected5 = fs.readFileSync("./test/src/expected/heroes/contextHeroModel.ts", "utf-8");
        let result5 = fs.readFileSync( "./test/dist/_autogenerated_viewmodels/heroes/contextHeroModel.ts", "utf-8");

        expect(result).be.equal(expected);
        expect(result2).be.equal(expected2);
        expect(result3).be.equal(expected3);
        expect(result4).be.equal(expected4);
        expect(result5).be.equal(expected5);

        done();

      });

});


